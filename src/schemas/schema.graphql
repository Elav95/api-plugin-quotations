extend type Query {
  "Get an quotation by its ID"
  quotationById(
    "The quotation ID"
    id: ID!,

    "The shop that owns the quotation"
    shopId: ID!,

    "A valid anonymous access token for this quotation. Required if the quotation is not linked with an account."
    token: String
  ): Quotation

  "Get all quotations for a single account, optionally limited to certain shop IDs and certain quotationStatus"
  quotations(
    "Filters to apply to a list of quotations"
    filters: QuotationFilterInput

    "Provide a list of shop IDs from which you want to get quotations from"
    shopIds: [ID],

    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor,

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor,

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt,

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt,

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int,

    "Return results sorted in this quotation"
    sortQuotation: SortQuotation = desc,

    "By default, quotations are sorted by when they were created, newest first. Set this to sort by one of the other allowed fields"
    sortBy: QuotationsSortByField = createdAt
  ): QuotationConnection!

  "Get all quotations for a single account, optionally limited to certain shop IDs and certain quotationStatus"
  quotationsByAccountId(
    "Limit to quotations placed by this account"
    accountId: ID!,

    "Limit to quotations with one of these statuses"
    quotationStatus: [String],

    "Limit to quotations owned by one of these shops"
    shopIds: [ID]!,

    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor,

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor,

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt,

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt,

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int,

    "Return results sorted in this quotation"
    sortQuotation: SortQuotation = desc,

    "By default, quotations are sorted by when they were created, newest first. Set this to sort by one of the other allowed fields"
    sortBy: QuotationsByAccountIdSortByField = createdAt
  ): QuotationsByAccountIdConnection!

  "Get an quotation by its reference ID (the ID shown to customers)"
  quotationByReferenceId(
    "The quotation reference ID (the ID shown to customers)"
    id: ID!,

    "The shop that owns the quotation"
    shopId: ID!,

    "A valid anonymous access token for this quotation. Required if the quotation is not linked with an account."
    token: String
  ): Quotation

  "Get refunds applied to an quotation by quotation ID"
  refunds(
    "The quotation ID"
    quotationId: ID!,

    "The shop that owns the quotation"
    shopId: ID!,

    "A valid anonymous access token for this quotation. Required if the quotation is not linked with an account."
    token: String
  ): [Refund]

  "Get refunds applied to a specific payment by payment ID"
  refundsByPaymentId(
    "The quotation ID"
    quotationId: ID!,

    "The ID of one of the payments made for this quotation"
    paymentId: ID!,

    "The shop that owns the quotation"
    shopId: ID!,

    "A valid anonymous access token for this quotation. Required if the quotation is not linked with an account."
    token: String
  ): [Refund]
}

extend type Mutation {
  """
  Use this mutation to add a new quotation fulfillment group to an quotation. It must have at least one
  item. Items may be provided or moved from another existing group or both.
  """
  addQuotationFulfillmentGroup(
    "Mutation input"
    input: AddQuotationFulfillmentGroupInput!
  ): AddQuotationFulfillmentGroupPayload!

  """
  Use this mutation to cancel one item of an quotation, either for the full quotationed quantity
  or for a partial quantity. If partial, the item will be split into two items and the
  original item will have a lower quantity and will be canceled.

  If this results in all items in a fulfillment group being canceled, the group will also
  be canceled. If this results in all fulfillment groups being canceled, the full quotation will
  also be canceled.
  """
  cancelQuotationItem(
    "Mutation input"
    input: CancelQuotationItemInput!
  ): CancelQuotationItemPayload!

  "Use this mutation to create a refund on a payment method used to make the quotation"
  createRefund(
    "Mutation input"
    input: CreateRefundInput!
  ): CreateRefundPayload!

  """
  Use this mutation to move one or more items between existing quotation fulfillment groups.
  """
  moveQuotationItems(
    "Mutation input"
    input: MoveQuotationItemsInput!
  ): MoveQuotationItemsPayload!

  """
  Use this mutation to place an quotation, providing information necessary to pay for it.
  The quotation will be placed only if authorization is successful for all submitted payments.
  """
  placeQuotation(
    "Mutation input"
    input: PlaceQuotationInput!
  ): PlaceQuotationPayload!

  """
  Use this mutation to reduce the quantity of one item of an quotation and create
  a new item for the remaining quantity in the same fulfillment group, and with the
  same item status. You may want to do this if you are only able to partially fulfill
  the item quotation right now.
  """
  splitQuotationItem(
    "Mutation input"
    input: SplitQuotationItemInput!
  ): SplitQuotationItemPayload!

  """
  Use this mutation to update quotation details after the quotation has been placed.
  """
  updateQuotation(
    "Mutation input"
    input: UpdateQuotationInput!
  ): UpdateQuotationPayload!

  """
  Use this mutation to update an quotation fulfillment group status and tracking information.
  """
  updateQuotationFulfillmentGroup(
    "Mutation input"
    input: UpdateQuotationFulfillmentGroupInput!
  ): UpdateQuotationFulfillmentGroupPayload!
}

"Allowed values for the `QuotationFulfillmentGroupItems` sortBy parameter"
enum QuotationFulfillmentGroupItemsSortByField {
  "Sort by the item ID"
  _id

  "Sort by the date and time when the item was added to the quotation"
  addedAt
}

"The fields by which you are allowed to sort any query that returns a `QuotationsByAccountIdConnection`"
enum QuotationsByAccountIdSortByField {
  "Sort by the quotation ID"
  _id

  "Sort by the date and time when the quotation was placed"
  createdAt
}

"The fields by which you are allowed to sort any query that returns a `QuotationConnection`"
enum QuotationsSortByField {
  "Sort by the quotation ID"
  _id

  "Sort by the date and time when the quotation was placed"
  createdAt
}

"""
Wraps a list of `Quotation`s, providing pagination cursors and information.

For information about what Relay-compatible connections are and how to use them, see the following articles:
- [Relay Connection Documentation](https://facebook.github.io/relay/docs/en/graphql-server-specification.html#connections)
- [Relay Connection Specification](https://facebook.github.io/relay/graphql/connections.htm)
- [Using Relay-style Connections With Apollo Client](https://www.apollographql.com/docs/react/recipes/pagination.html)
"""
type QuotationConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [QuotationEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [Quotation]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}


"""
Wraps a list of `Quotation`s, providing pagination cursors and information.

For information about what Relay-compatible connections are and how to use them, see the following articles:
- [Relay Connection Documentation](https://facebook.github.io/relay/docs/en/graphql-server-specification.html#connections)
- [Relay Connection Specification](https://facebook.github.io/relay/graphql/connections.htm)
- [Using Relay-style Connections With Apollo Client](https://www.apollographql.com/docs/react/recipes/pagination.html)
"""
type QuotationsByAccountIdConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [QuotationsByAccountIdEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [Quotation]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}

"A connection edge in which each node is a `Quotation` object"
type QuotationEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The quotation"
  node: Quotation
}

"A connection edge in which each node is a `Quotation` object"
type QuotationsByAccountIdEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The quotation"
  node: Quotation
}

"""
Wraps a list of `QuotationItem`s, providing pagination cursors and information.

For information about what Relay-compatible connections are and how to use them, see the following articles:
- [Relay Connection Documentation](https://facebook.github.io/relay/docs/en/graphql-server-specification.html#connections)
- [Relay Connection Specification](https://facebook.github.io/relay/graphql/connections.htm)
- [Using Relay-style Connections With Apollo Client](https://www.apollographql.com/docs/react/recipes/pagination.html)
"""
type QuotationItemConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [QuotationItemEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [QuotationItem]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}

"A connection edge in which each node is a `QuotationItem` object"
type QuotationItemEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The quotation item"
  node: QuotationItem
}

"One attribute of an quotation item"
type QuotationItemAttribute {
  "The attribute label, e.g., Color"
  label: String

  "The attribute value, e.g., Blue"
  value: String
}

"A summary of the totals for this quotation"
type QuotationSummary {
  "The total of all discounts applied, as a positive number"
  discountTotal: Money!

  "The calculated tax-exclusive tax rate on all items and fulfillment prices (taxTotal / taxableAmount)"
  effectiveTaxRate: Rate!

  "The total price of all chosen fulfillment methods"
  fulfillmentTotal: Money!

  "The combined prices of all cart items"
  itemTotal: Money!

  "The total estimated tax that has not already been included in the item prices"
  taxTotal: Money!

  "The total amount that was deemed taxable by the tax service"
  taxableAmount: Money!

  "The sum of `itemTotal`, `fulfillmentTotal`, and `taxTotal`, minus `discountTotal`"
  total: Money!
}

"""
A single item in an quotation. The item contains information about a purchase.
"""
type QuotationItem implements Node {
  "The quotation item ID"
  _id: ID!

  """"
  The date and time at which this item was first added to the associated cart.
  If an item is added, removed, and then added again, this will reflect the most recent addition.
  However, if an item is added twice, the quantity will increase but this date will remain
  the initial added date.
  """
  addedAt: DateTime

  """
  FUTURE. Additional attributes of the chosen item. For example, if this item is for a product, socks, where `blue` and `small`
  options were chosen for some configurable attributes, then `color:blue` and `size:small` will be indicated here.
  """
  attributes: [QuotationItemAttribute]

  "If this quotation item is canceled, the reason for cancelation, if provided"
  cancelReason: String

  "The date and time at which the quotation item was created"
  createdAt: DateTime!

  "The URLs for a picture of the item in various sizes"
  imageURLs: ImageSizes

  "Arbitrary additional metadata about this cart item."
  metafields: [Metafield]

  "The short title of the associated option, if this is an option item"
  optionTitle: String

  "Packing information such as item weight, height, length, and depth. Used for calculating shipping rates."
  parcel: ShippingParcel

  "The price of the item at the time of purchase"
  price: Money!

  "The product and chosen options"
  productConfiguration: ProductConfiguration!

  "The product's slug"
  productSlug: String

  "The list of tags that have been applied to this product"
  productTags(
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor,

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor,

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt,

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt,

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int,

    "Return results sorted in this quotation"
    sortQuotation: SortQuotation = asc,

    "By default, tags are sorted by ID. Set this to sort by one of the other allowed fields"
    sortBy: TagSortByField = _id
  ): TagConnection

  "The type of product, used to display cart items differently"
  productType: String

  "The product vendor"
  productVendor: String

  "The quantity of this item that has been added to the cart. This must be a positive integer. Remove this `CartItem` from it's associated cart if you want `0` of this item."
  quantity: Int!

  "The shop associated with this cart item."
  shop: Shop!

  "The machine-readable quotation item status."
  status: String!

  "The price of the item multiplied by the quantity of this item quotationed"
  subtotal: Money!

  "A title for use in quotations that conveys the selected product's title + chosen options"
  title: String!

  "The date and time at which this item was last updated"
  updatedAt: DateTime!

  "The selected variant title"
  variantTitle: String
}

"""
Extra data for an quotation fulfillment group with type `shipping`
"""
type ShippingQuotationFulfillmentGroupData {
  "The address to ship to"
  shippingAddress: Address!
}

"Extra data for an quotation fulfillment group"
union QuotationFulfillmentGroupData = ShippingQuotationFulfillmentGroupData

"An quotation fulfillment group"
type QuotationFulfillmentGroup implements Node {
  "The quotation fulfillment group ID"
  _id: ID!

  "Information needed by the selected fulfillment method to properly fulfill the quotation"
  data: QuotationFulfillmentGroupData

  "The quotation status for display in UI"
  displayStatus(
    """
    The language in which you want the status. If no translation is available for this language,
    it will be in the default language of the shop that owns the quotation.
    """
    language: String!
  ): String!

  "The items that are part of this fulfillment group"
  items(
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor,

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor,

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt,

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt,

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int,

    "Return results sorted in this quotation"
    sortQuotation: SortQuotation = desc,

    "By default, quotation items are sorted by when they were added to the quotation, newest first. Set this to sort by one of the other allowed fields"
    sortBy: QuotationFulfillmentGroupItemsSortByField = addedAt
  ): QuotationItemConnection

  "The fulfillment method that was selected, with its price quote"
  selectedFulfillmentOption: FulfillmentOption!

  "The shipping label URL"
  shippingLabelUrl: String

  "The shop responsible for fulfilling this quotation"
  shop: Shop!

  "The machine-readable fulfillment group status."
  status: String!

  "A summary of the totals for this group"
  summary: QuotationSummary!

  "Total quantity of all items in the group"
  totalItemQuantity: Int!

  "The quotation fulfillment group shipment tracking number"
  tracking: String

  "The quotation fulfillment group shipment tracking URL"
  trackingUrl: String

  """
  The fulfillment type. Any valid type that has been registered by a fulfillment plugin. Examples: `shipping`, `digital`
  """
  type: FulfillmentType!
}

"An quotation"
type Quotation implements Node {
  "The Quotation ID"
  _id: ID!

  "The account that placed the quotation. Some quotations are created for anonymous users. Anonymous quotations have a null account."
  account: Account

  "The ID of the cart that created this quotation. Carts are deleted after becoming quotations, so this is just a reference."
  cartId: ID

  "The date and time at which the cart was created, which is when the first item was added to it."
  createdAt: DateTime!

  "The quotation status for display in UI"
  displayStatus(
    """
    The language in which you want the status. If no translation is available for this language,
    it will be in the default language of the shop that owns the quotation.
    """
    language: String!
  ): String!

  "An email address that has been associated with the cart"
  email: String

  "One or more fulfillment groups. Each of these are fulfilled and charged as separate quotations."
  fulfillmentGroups: [QuotationFulfillmentGroup]!

  "Notes about the quotation. This will always return an array but it may be empty"
  notes: [QuotationNote]!

  """
  Payments that collectively have paid or will pay for the total amount due for this quotation.
  May be null if no payment is needed.
  """
  payments: [Payment]

  """
  An ID by which the customer can reference this quotation when enquiring about it. A storefront user
  interface may show this to customers. Do not display other IDs (`_id`) to customers.
  """
  referenceId: String!

  "Refunds that have been applied to the payments on this quotation."
  refunds: [Refund]

  "The shop through which the quotation was placed"
  shop: Shop!

  "The machine-readable quotation status."
  status: String!

  "A summary of the totals for all fulfillment groups for this quotation"
  summary: QuotationSummary!

  "Total quantity of all items in the quotation"
  totalItemQuantity: Int!

  "The date and time at which this quotation was last updated"
  updatedAt: DateTime!
}

"A note about an quotation"
type QuotationNote {
  "The account who wrote this note"
  account: Account!

  "The content of the note"
  content: String!

  "The date and time at which this note was created"
  createdAt: DateTime!

  "The date and time at which this note was last updated"
  updatedAt: DateTime!
}

"A refund of a payment on an quotation"
type Refund implements Node {
  "The refund ID"
  _id: ID!

  "The amount of the refund"
  amount: Money!

  "The date and time at which the refund was created"
  createdAt: DateTime!

  "The display name of the payment refunded to"
  paymentDisplayName: String!

  "The ID of the payment this refund is applied to"
  paymentId: ID!

  "The reason for the refund"
  reason: String
}

"Input for an `QuotationFulfillmentGroupItem`"
input QuotationFulfillmentGroupItemInput {
  "The date and time at which this item was first added to the source cart, if this is something you want to track"
  addedAt: DateTime

  """
  The price of the item, in the `quotation.currencyCode` currency. This value is not trusted; the actual price
  is confirmed by the Quotation service. However, providing this value prevents an quotation being created for an
  amount that does not match what was shown to the shopper in quotation preview.
  """
  price: Float!

  "The product and chosen options"
  productConfiguration: ProductConfigurationInput!

  "The desired quantity of this item. This must be a positive integer."
  quantity: Int!
}

"Information needed by the selected fulfillment method to properly fulfill the quotation"
input QuotationFulfillmentGroupDataInput {
  "The mailing address to which this fulfillment group should be shipped"
  shippingAddress: AddressInput
}

"Input for an `QuotationFulfillmentGroup`"
input QuotationFulfillmentGroupInput {
  "Information needed by the selected fulfillment method to properly fulfill the quotation"
  data: QuotationFulfillmentGroupDataInput

  "The list of items to be quotationed"
  items: [QuotationFulfillmentGroupItemInput]!

  "The ID of the fulfillment method to be used for this quotation group"
  selectedFulfillmentMethodId: ID!

  "The shop that owns these items and needs to fulfill this part of the quotation"
  shopId: ID!

  """
  The total price of the items, fulfillment, and taxes, for this group, less any discounts, in the
  `quotation.currencyCode` currency. This value is not trusted; the actual total is calculated by the
  Quotation service. However, providing this value prevents an quotation being created for an amount that
  does not match what was shown to the shopper in quotation preview.
  """
  totalPrice: Float

  """
  The fulfillment type. Any valid type that has been registered by a fulfillment plugin. Examples: `shipping`, `digital`
  """
  type: FulfillmentType!
}

"Similar to `QuotationFulfillmentGroupInput` but `items` can be omitted if moving existing items to the new group"
input QuotationFulfillmentGroupExistingQuotationInput {
  "Information needed by the selected fulfillment method to properly fulfill the quotation"
  data: QuotationFulfillmentGroupDataInput

  "The list of items to be quotationed"
  items: [QuotationFulfillmentGroupItemInput]

  "The ID of the fulfillment method to be used for this quotation group"
  selectedFulfillmentMethodId: ID!

  "The shop that owns these items and needs to fulfill this part of the quotation"
  shopId: ID!

  """
  The total price of the items, fulfillment, and taxes, for this group, less any discounts, in the
  `quotation.currencyCode` currency. This value is not trusted; the actual total is calculated by the
  Quotation service. However, providing this value prevents an quotation being created for an amount that
  does not match what was shown to the shopper in quotation preview.
  """
  totalPrice: Float

  """
  The fulfillment type. Any valid type that has been registered by a fulfillment plugin. Examples: `shipping`, `digital`
  """
  type: FulfillmentType!
}

"Input for placing an quotation"
input QuotationInput {
  """
  The ID of the cart that is becoming an quotation. This is optional, and you can create an quotation without ever
  creating a cart. If you do have a cart, there are two good reasons to provide this. First, it serves as a
  reference. Second, it allows the Cart service to automatically delete the related cart after the quotation is
  created.
  """
  cartId: String

  "The code for the currency in which all values are being provided"
  currencyCode: String!

  """
  An email address to use for quotation tracking and correspondence. If a logged in user is placing an quotation,
  we recommend that you use their "quotations" email address, if they have one, or their default email address.
  Or you can ask them to provide any email address.
  """
  email: String!

  """
  One or more fulfillment groups for the quotation. These are the actual quotations that need to be fulfilled,
  separate by shop, fulfillment type, and shipping origin or destination.
  """
  fulfillmentGroups: [QuotationFulfillmentGroupInput]!

  """
  The shop through which the quotation should be placed. Payment settings from this shop will be used. Note that
  each fulfillment group also has a shop ID, which represents the shop that needs to fulfill that part of the
  quotation, and those shop IDs may or may not match this one.
  """
  shopId: String!
}

"Input for adding quotation payments"
input PaymentInput {
  """
  Amount to charge, which must be less than or equal to the quotation total. This is assumed
  to be in the same currency as the quotation. Set to `null` to charge the remaining amount
  to this payment method, which might be the full quotation total if this is the only payment.
  """
  amount: Float!

  """
  The billing address entered by the shopper. If omitted, the billing address on the quotation input
  will be used. Some payment methods may not require a billing address but others will fail
  authorization without one, so be sure that client UI code is aware of which payment methods
  require collecting one.
  """
  billingAddress: AddressInput

  "Any additional user-provided input necessary to authorize and capture the payment"
  data: JSONObject

  "The name of the payment method to use for this payment"
  method: PaymentMethodName!
}

"Input for the addQuotationFulfillmentGroup mutation"
input AddQuotationFulfillmentGroupInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The quotation fulfillment group input, used to build the new group"
  fulfillmentGroup: QuotationFulfillmentGroupExistingQuotationInput!

  "Optional list of quotation item IDs that should be moved from an existing group to the new group"
  moveItemIds: [ID]

  "ID of the quotation that has the item you want to add the group to"
  quotationId: ID!
}

"Input for the cancelQuotationItem mutation"
input CancelQuotationItemInput {
  "Quantity to cancel. Must be equal to or less than the item quantity."
  cancelQuantity: Int!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "ID of the item quotation you want to cancel"
  itemId: ID!

  "ID of the quotation that has the item you want to cancel"
  quotationId: ID!

  """
  An optional free text reason for cancellation, which may be shown to operators
  or to the user who placed the quotation.
  """
  reason: String
}

"Input for the cancelQuotationItem mutation"
input CreateRefundInput {
  "Amount to cancel. Must be equal to or less than the remaining non-refunded payment amount for this payment method."
  amount: Float!

  "ID of the quotation that has the item you want to cancel"
  quotationId: ID!

  "ID of the payment that you want to refund"
  paymentId: ID!

  """
  An optional free text reason for refund, which may be shown to operators
  or to the user who requested the refund.
  """
  reason: String
}

"Input for the placeQuotation mutation"
input PlaceQuotationInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The quotation to be placed, if payment is accepted"
  quotation: QuotationInput!

  """
  The information necessary to pay. Collect this information from the shopper during a checkout flow.
  You need not provide any payment input if the total is zero.
  The total of all payment input `amount` fields must add up to the quotation total. The first payment
  method where the `amount` field is `null` will be charged the remainder due.
  """
  payments: [PaymentInput]
}

"Input for the moveQuotationItems mutation"
input MoveQuotationItemsInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The ID of the quotation fulfillment group from which all the items are to be moved."
  fromFulfillmentGroupId: ID!

  "The list of item IDs to move. The full quantity must be moved."
  itemIds: [ID]!

  "ID of the quotation that has the items you want to move"
  quotationId: ID!

  "The ID of the quotation fulfillment group to which all the items are to be moved."
  toFulfillmentGroupId: ID!
}

"Input for the splitQuotationItem mutation"
input SplitQuotationItemInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "ID of the item quotation you want to split"
  itemId: ID!

  "The quantity that will be transferred to a new quotation item on the same fulfillment group."
  newItemQuantity: Int!

  "ID of the quotation that has the item you want to split"
  quotationId: ID!
}

"Input for the updateQuotation mutation"
input UpdateQuotationInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "Set the quotation email to this"
  email: String

  "ID of the quotation to update"
  quotationId: ID!

  "Set the current quotation status to this"
  status: String
}

"Input for the updateQuotationFulfillmentGroup mutation"
input UpdateQuotationFulfillmentGroupInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "ID of the quotation fulfillment group to update"
  quotationFulfillmentGroupId: ID!

  "ID of the quotation to update"
  quotationId: ID!

  "Set the current quotation fulfillment group status to this"
  status: String

  "Set this as the current quotation fulfillment group shipment tracking reference"
  tracking: String

  "Set this as the current quotation fulfillment group shipment tracking URL"
  trackingUrl: String
}

"Response payload for the addQuotationFulfillmentGroup mutation"
type AddQuotationFulfillmentGroupPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "ID of the added fulfillment group"
  newFulfillmentGroupId: ID!

  "The updated quotation"
  quotation: Quotation!
}

"Response payload for the cancelQuotationItem mutation"
type CancelQuotationItemPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The updated quotation"
  quotation: Quotation!
}

"Response payload for the createRefund mutation"
type CreateRefundPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The updated quotation"
  quotation: Quotation!
}

"Response payload for the moveQuotationItems mutation"
type MoveQuotationItemsPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The updated quotation"
  quotation: Quotation!
}

"Response payload for the placeQuotation mutation"
type PlaceQuotationPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Quotations that were created"
  quotations: [Quotation]!

  "If you are not logged in, this will be a token that can be used for future requests"
  token: String
}

"Response payload for the splitQuotationItem mutation"
type SplitQuotationItemPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The ID of the new quotation item that was created"
  newItemId: ID!

  "The updated quotation"
  quotation: Quotation!
}

"Response payload for the updateQuotation mutation"
type UpdateQuotationPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The updated quotation"
  quotation: Quotation!
}

"Response payload for the updateQuotationFulfillmentGroup mutation"
type UpdateQuotationFulfillmentGroupPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The updated quotation"
  quotation: Quotation!
}

"Available quotation fulfillment statuses"
enum QuotationFulfillmentStatus {
  "An quotation that has been completed"
  completed

  "Newly created quotation that needs processing"
  new

  "An quotation that is currently being processed"
  processing
}

"Quotation payment status"
enum QuotationPaymentStatus {
  "Payments that have been successfully processed"
  completed

  "A payment intent has been created"
  created
}

"Quotation status"
enum QuotationStatus {
  "Canceled quotation"
  canceled

  "A completed quotation"
  completed

  "A new quotation that needs processing"
  new

  "An quotation that is being processed"
  processing
}

"Input for the createdAt database field"
input CreatedAtInput {
  "Start date, inclusive"
  gte: DateTime

  "End date, inclusive"
  lte: DateTime
}

"Input type for filters to by applied to an Quotations list"
input QuotationFilterInput {
  "A createdAt date range to filter by"
  createdAt: CreatedAtInput

  "An quotation's fulfillment status"
  fulfillmentStatus: [QuotationFulfillmentStatus]

  "An quotation's payment status"
  paymentStatus: [QuotationPaymentStatus]

  "Keywords typed by the user in the search input field"
  searchField: String

  "The quotation's status to filter by"
  status: QuotationStatus
}
